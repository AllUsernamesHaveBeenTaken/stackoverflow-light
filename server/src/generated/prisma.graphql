# source: https://eu1.prisma.sh/seppesnoeck/stackoverflow-light/dev
# timestamp: Sat Sep 01 2018 15:22:55 GMT+0200 (CEST)

type AggregateQuestion {
  count: Int!
}

type AggregateQuestionVote {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createQuestion(data: QuestionCreateInput!): Question!
  createUser(data: UserCreateInput!): User!
  createQuestionVote(data: QuestionVoteCreateInput!): QuestionVote!
  updateQuestion(data: QuestionUpdateInput!, where: QuestionWhereUniqueInput!): Question
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateQuestionVote(data: QuestionVoteUpdateInput!, where: QuestionVoteWhereUniqueInput!): QuestionVote
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  deleteUser(where: UserWhereUniqueInput!): User
  deleteQuestionVote(where: QuestionVoteWhereUniqueInput!): QuestionVote
  upsertQuestion(where: QuestionWhereUniqueInput!, create: QuestionCreateInput!, update: QuestionUpdateInput!): Question!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertQuestionVote(where: QuestionVoteWhereUniqueInput!, create: QuestionVoteCreateInput!, update: QuestionVoteUpdateInput!): QuestionVote!
  updateManyQuestions(data: QuestionUpdateInput!, where: QuestionWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyQuestionVotes(data: QuestionVoteUpdateInput!, where: QuestionVoteWhereInput): BatchPayload!
  deleteManyQuestions(where: QuestionWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyQuestionVotes(where: QuestionVoteWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  questionVotes(where: QuestionVoteWhereInput, orderBy: QuestionVoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionVote]!
  question(where: QuestionWhereUniqueInput!): Question
  user(where: UserWhereUniqueInput!): User
  questionVote(where: QuestionVoteWhereUniqueInput!): QuestionVote
  questionsConnection(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  questionVotesConnection(where: QuestionVoteWhereInput, orderBy: QuestionVoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionVoteConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Question implements Node {
  id: ID!
  title: String!
  description: String
  createdAt: DateTime!
  askedBy(where: UserWhereInput): User
  votes(where: QuestionVoteWhereInput, orderBy: QuestionVoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionVote!]
}

"""A connection to a list of items."""
type QuestionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuestionEdge]!
  aggregate: AggregateQuestion!
}

input QuestionCreateInput {
  title: String!
  description: String
  askedBy: UserCreateOneWithoutQuestionsInput
  votes: QuestionVoteCreateManyWithoutQuestionInput
}

input QuestionCreateManyWithoutAskedByInput {
  create: [QuestionCreateWithoutAskedByInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateOneWithoutVotesInput {
  create: QuestionCreateWithoutVotesInput
  connect: QuestionWhereUniqueInput
}

input QuestionCreateWithoutAskedByInput {
  title: String!
  description: String
  votes: QuestionVoteCreateManyWithoutQuestionInput
}

input QuestionCreateWithoutVotesInput {
  title: String!
  description: String
  askedBy: UserCreateOneWithoutQuestionsInput
}

"""An edge in a connection."""
type QuestionEdge {
  """The item at the end of the edge."""
  node: Question!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QuestionOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type QuestionPreviousValues {
  id: ID!
  title: String!
  description: String
  createdAt: DateTime!
}

type QuestionSubscriptionPayload {
  mutation: MutationType!
  node: Question
  updatedFields: [String!]
  previousValues: QuestionPreviousValues
}

input QuestionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuestionWhereInput
}

input QuestionUpdateInput {
  title: String
  description: String
  askedBy: UserUpdateOneWithoutQuestionsInput
  votes: QuestionVoteUpdateManyWithoutQuestionInput
}

input QuestionUpdateManyWithoutAskedByInput {
  create: [QuestionCreateWithoutAskedByInput!]
  connect: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutAskedByInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutAskedByInput!]
}

input QuestionUpdateOneWithoutVotesInput {
  create: QuestionCreateWithoutVotesInput
  connect: QuestionWhereUniqueInput
  delete: Boolean
  update: QuestionUpdateWithoutVotesDataInput
  upsert: QuestionUpsertWithoutVotesInput
}

input QuestionUpdateWithoutAskedByDataInput {
  title: String
  description: String
  votes: QuestionVoteUpdateManyWithoutQuestionInput
}

input QuestionUpdateWithoutVotesDataInput {
  title: String
  description: String
  askedBy: UserUpdateOneWithoutQuestionsInput
}

input QuestionUpdateWithWhereUniqueWithoutAskedByInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutAskedByDataInput!
}

input QuestionUpsertWithoutVotesInput {
  update: QuestionUpdateWithoutVotesDataInput!
  create: QuestionCreateWithoutVotesInput!
}

input QuestionUpsertWithWhereUniqueWithoutAskedByInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutAskedByDataInput!
  create: QuestionCreateWithoutAskedByInput!
}

type QuestionVote implements Node {
  id: ID!
  isUpVote: Boolean!
  question(where: QuestionWhereInput): Question!
  user(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type QuestionVoteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuestionVoteEdge]!
  aggregate: AggregateQuestionVote!
}

input QuestionVoteCreateInput {
  isUpVote: Boolean!
  question: QuestionCreateOneWithoutVotesInput!
  user: UserCreateOneWithoutQuestionVotesInput!
}

input QuestionVoteCreateManyWithoutQuestionInput {
  create: [QuestionVoteCreateWithoutQuestionInput!]
  connect: [QuestionVoteWhereUniqueInput!]
}

input QuestionVoteCreateManyWithoutUserInput {
  create: [QuestionVoteCreateWithoutUserInput!]
  connect: [QuestionVoteWhereUniqueInput!]
}

input QuestionVoteCreateWithoutQuestionInput {
  isUpVote: Boolean!
  user: UserCreateOneWithoutQuestionVotesInput!
}

input QuestionVoteCreateWithoutUserInput {
  isUpVote: Boolean!
  question: QuestionCreateOneWithoutVotesInput!
}

"""An edge in a connection."""
type QuestionVoteEdge {
  """The item at the end of the edge."""
  node: QuestionVote!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QuestionVoteOrderByInput {
  id_ASC
  id_DESC
  isUpVote_ASC
  isUpVote_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type QuestionVotePreviousValues {
  id: ID!
  isUpVote: Boolean!
}

type QuestionVoteSubscriptionPayload {
  mutation: MutationType!
  node: QuestionVote
  updatedFields: [String!]
  previousValues: QuestionVotePreviousValues
}

input QuestionVoteSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionVoteSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionVoteSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionVoteSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuestionVoteWhereInput
}

input QuestionVoteUpdateInput {
  isUpVote: Boolean
  question: QuestionUpdateOneWithoutVotesInput
  user: UserUpdateOneWithoutQuestionVotesInput
}

input QuestionVoteUpdateManyWithoutQuestionInput {
  create: [QuestionVoteCreateWithoutQuestionInput!]
  connect: [QuestionVoteWhereUniqueInput!]
  disconnect: [QuestionVoteWhereUniqueInput!]
  delete: [QuestionVoteWhereUniqueInput!]
  update: [QuestionVoteUpdateWithWhereUniqueWithoutQuestionInput!]
  upsert: [QuestionVoteUpsertWithWhereUniqueWithoutQuestionInput!]
}

input QuestionVoteUpdateManyWithoutUserInput {
  create: [QuestionVoteCreateWithoutUserInput!]
  connect: [QuestionVoteWhereUniqueInput!]
  disconnect: [QuestionVoteWhereUniqueInput!]
  delete: [QuestionVoteWhereUniqueInput!]
  update: [QuestionVoteUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [QuestionVoteUpsertWithWhereUniqueWithoutUserInput!]
}

input QuestionVoteUpdateWithoutQuestionDataInput {
  isUpVote: Boolean
  user: UserUpdateOneWithoutQuestionVotesInput
}

input QuestionVoteUpdateWithoutUserDataInput {
  isUpVote: Boolean
  question: QuestionUpdateOneWithoutVotesInput
}

input QuestionVoteUpdateWithWhereUniqueWithoutQuestionInput {
  where: QuestionVoteWhereUniqueInput!
  data: QuestionVoteUpdateWithoutQuestionDataInput!
}

input QuestionVoteUpdateWithWhereUniqueWithoutUserInput {
  where: QuestionVoteWhereUniqueInput!
  data: QuestionVoteUpdateWithoutUserDataInput!
}

input QuestionVoteUpsertWithWhereUniqueWithoutQuestionInput {
  where: QuestionVoteWhereUniqueInput!
  update: QuestionVoteUpdateWithoutQuestionDataInput!
  create: QuestionVoteCreateWithoutQuestionInput!
}

input QuestionVoteUpsertWithWhereUniqueWithoutUserInput {
  where: QuestionVoteWhereUniqueInput!
  update: QuestionVoteUpdateWithoutUserDataInput!
  create: QuestionVoteCreateWithoutUserInput!
}

input QuestionVoteWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionVoteWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionVoteWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionVoteWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  isUpVote: Boolean

  """All values that are not equal to given value."""
  isUpVote_not: Boolean
  question: QuestionWhereInput
  user: UserWhereInput
}

input QuestionVoteWhereUniqueInput {
  id: ID
}

input QuestionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  askedBy: UserWhereInput
  votes_every: QuestionVoteWhereInput
  votes_some: QuestionVoteWhereInput
  votes_none: QuestionVoteWhereInput
}

input QuestionWhereUniqueInput {
  id: ID
}

type Subscription {
  question(where: QuestionSubscriptionWhereInput): QuestionSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  questionVote(where: QuestionVoteSubscriptionWhereInput): QuestionVoteSubscriptionPayload
}

type User implements Node {
  id: ID!
  username: String!
  email: String!
  password: String!
  createdAt: DateTime!
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  questionVotes(where: QuestionVoteWhereInput, orderBy: QuestionVoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionVote!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String!
  email: String!
  password: String!
  questions: QuestionCreateManyWithoutAskedByInput
  questionVotes: QuestionVoteCreateManyWithoutUserInput
}

input UserCreateOneWithoutQuestionsInput {
  create: UserCreateWithoutQuestionsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutQuestionVotesInput {
  create: UserCreateWithoutQuestionVotesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutQuestionsInput {
  username: String!
  email: String!
  password: String!
  questionVotes: QuestionVoteCreateManyWithoutUserInput
}

input UserCreateWithoutQuestionVotesInput {
  username: String!
  email: String!
  password: String!
  questions: QuestionCreateManyWithoutAskedByInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  email: String!
  password: String!
  createdAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  username: String
  email: String
  password: String
  questions: QuestionUpdateManyWithoutAskedByInput
  questionVotes: QuestionVoteUpdateManyWithoutUserInput
}

input UserUpdateOneWithoutQuestionsInput {
  create: UserCreateWithoutQuestionsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutQuestionsDataInput
  upsert: UserUpsertWithoutQuestionsInput
}

input UserUpdateOneWithoutQuestionVotesInput {
  create: UserCreateWithoutQuestionVotesInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutQuestionVotesDataInput
  upsert: UserUpsertWithoutQuestionVotesInput
}

input UserUpdateWithoutQuestionsDataInput {
  username: String
  email: String
  password: String
  questionVotes: QuestionVoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutQuestionVotesDataInput {
  username: String
  email: String
  password: String
  questions: QuestionUpdateManyWithoutAskedByInput
}

input UserUpsertWithoutQuestionsInput {
  update: UserUpdateWithoutQuestionsDataInput!
  create: UserCreateWithoutQuestionsInput!
}

input UserUpsertWithoutQuestionVotesInput {
  update: UserUpdateWithoutQuestionVotesDataInput!
  create: UserCreateWithoutQuestionVotesInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  questions_every: QuestionWhereInput
  questions_some: QuestionWhereInput
  questions_none: QuestionWhereInput
  questionVotes_every: QuestionVoteWhereInput
  questionVotes_some: QuestionVoteWhereInput
  questionVotes_none: QuestionVoteWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
